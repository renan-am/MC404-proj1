Trabalho 1 -- MC 404

Este arquivo possui informações diversas sobre o trabalho.

O trabalho deve ser escrito na linguagem C (utilizando apenas as bibliotecas padrões).
Uma suite de compilação e teste é disponibilizada pelo Makefile. A estrutura do diretório é mostrada abaixo:

codigo_v1:
    aux: Contém os arquivos axiliares para gerar main.c da parte 1 e da parte 2.
    bin: Contém o arquivo binário do montador, referente ao seu código.
    resultados: Contém os resultados esperados dos testes abertos para a parte 1 e para a parte 2. (24 testes)
    saidas: Contém os resultados dos testes executados com o seu programa.
    src: Deve conter os arquivos de cabeçalho (.h) e de código fonte do seu programa (.c)
    testes: Contém os arquivos de entrada para realização dos testes abertos.
    Makefile:
        Para auxiliar, o Makefile contém as regras a seguir (são similares às utilizadas no Sistema Susy):
        * montador-p1.x: Compila o main.c da parte 1 e os arquivos da pasta src e gera um binario do montador, na pasta bin chamado montador.x.
        * montador-p2.x: Compila o main.c da parte 2 e os arquivos da pasta src e gera um binario do montador, na pasta bin chamado montador.x.
        * executar-tudo: Executa todos os testes abertos com o binario montador.x e reporta a saída na tela e na pasta saidas.
        * testar-parte-1: Compara o resultados dos testes da parte 1 gerado (pasta saidas) com o esperado (pasta resultados).
        * testar-parte-2: Compara o resultados dos testes da parte 2 gerado (pasta saidas) com o esperado (pasta resultados).
        * clean: Limpa os arquivos binários

    Assim, para testar a parte 1, use:
        make clean
        make montador-p1.x
        make executar-tudo
        make testar-parte1

    E para testar a parte 2, use:
        make clean
        make montador-p2.x
        make executar-tudo
        make testar-parte2


O trabalho é dividido em duas partes: (1) processamento da entrada e (2) emissão do mapa de memória
    (1) Nesta parte, você deve implementar a função 'int processarEntrada(char*, unsigned);' do arquivo processarEntrada.c. Você pode utilizar funções e arquivos auxiliares (colocando-os na pasta src)
    (Nota: O arquivo main.c a ser utilizada para parte 1 e parte 2 será o disponibilizado. Portanto não adicione coisas nele, nem em token.c/token.h)
    (Nota: O main.c, chama as funções processarEntrada e emitirMapaDeMemoria, implementadas por você. Lembre-se de retornar 1 ou 0 e imprimir o erro em stderr)
    Quando seu código retorna 0, na função processar entrada na parte 1, a lista de tokens é então impressa (veja main.c)

    EXEMPLO:
    Supondo o código:

    .org 10         #linha 1
    add 0x10        #linha 2

    * Primeiro delimite os caracteres da entrada por seus espaços (tabulações e troca de linhas). Comentários são ignorados:
        palavra: ".org"
        palavra: "10"
        palavra: "add"
        palavra: "0x10"

    * Determine qual token referente a cada palavra e crie e adicione-o na lista de tokens (veja arquivo token.h):
        ".org"  -> criar/alocar um token com: {tipo: Diretiva, palavra: ".org", linha: 1} -> adicionarToken()
        "10"    -> criar/alocar um token {tipo: Decimal, palavra: "10", linha: 1} -> adicionarToken()
        "add"   -> criar/alocar um token com: {tipo: Instrucao, palavra: "add", linha: 2} -> adicionarToken()
        "0x10   -> criar/alocar um token {tipo: Hexadecimal, palavra: "0x10", linha: 2} -> adicionarToken()
    * Nesta fase, você pode verificar erros lexicos!
    * Nota: A lista de Tokens já está implementada em token.c, sendo um vetor estatico de Tokens (maximo 4096 elementos).  Sempre que adicionarToken() é utilizado, uma token é adicionado a lista.

    * Posteriormente, você pode verificar todos os tokens coletados, em ordem e verificar por erros gramaticais....
    * Se houver erros lexicos/gramaticais, imprima o Erro na saída de erro (stderr) e retorne 1 na função processarEntrada();
    * Caso contrário, retorne 0 na função processarEntrada. Ao retornar 0, para parte 1, a lista de tokens será impressa (chamada pela função main)

    * Você pode manter tabelas auxiliares para determinar os simbolos já definidos, ou não definidos...

-------------------------------------------------------

    (2) * Para a parte 2 você deve checar por erros semanticos (rotulos utilizados e não declarados), se houver erros, imprima em stderr e retorne 1 na função emitirMapaDeMemoria()
    * Utilize os tokens adicionados a lista (da parte 1), utilizando a função recuperaToken()

-------------------------------------------------------

A submissão deve ser feita no Susy dos arquivos .c e .h, e não deve passar de 4mb. Maximo de 4 arquivos auxiliares
